#!groovy

String prmNameTerrafromAction = "terraformaction"
String prmNameAWSResource = "awsresource"

def PROPERTIES_PARAM = [ 
    choice( choices : ['apply', 'destroy'],
        description: "The terraform action that need to performed on the resources",
        name: prmNameTerrafromAction),

    choice( choices: ['vpc', 'ec2-web', 'ec2-app', 'alb-web', 'alb-app', 'rds'],
        description: "AWS Resource that need to be provisioned",
        name: prmNameAWSResource)
]

def PRM_TERRAFORM_ACTION = params[prmNameTerrafromAction]
def PRM_AWS_RESOURCE = params[prmNameAWSResource]

properties([
    parameters(PROPERTIES_PARAM)
])

pipeline {
    agent any

    stages {
        // stage ('Downloading Terraform') {
        //     steps {
        //         script {
        //             echo "Downloading the terraform binary"
        //             sh """
        //                 wget https://releases.hashicorp.com/terraform/0.13.5/terraform_0.13.5_linux_amd64.zip
        //                 unzip terraform_0.13.5_linux_amd64.zip
        //                 ls -l
        //             """
        //         }
        //     }
        // }

        stage ('Running terraform init') {
            steps {
                script {
                    echo "Setting up the workspace"
                    sh """
                        export AWS_DEFAULT_REGION=us-west-2
                        echo "workspace is ${workspace}"
                        cd ${workspace}
                        mkdir provision
                        cp -Rf Challenge-1/Terraform/Resources/$PRM_AWS_RESOURCE/*.tf provision/
                        cp -Rf Challenge-1/Terraform/Resources/$PRM_AWS_RESOURCE/*.tfvars provision/
                        ls -l
                        ls -l provision/
                    """
                    echo "Checking the terraform version"
                    sh """
                        cd provision/
                        terraform --version
                    """
                    echo "Running the terraform init command"
                    sh """
                        cd provision/
                        terraform init
                    """
                }
            }
        }

        // stage ('checking aws commands working or not') {
        //     steps {
        //         script {
        //             echo "running aws cli command"
        //             sh """
        //                 aws s3 ls
        //                 aws s3api create-bucket --bucket terraform-hsgcjsbcjhs-1234 --create-bucket-configuration LocationConstraint=us-west-2
        //             """
        //         }
        //     }
        // }

        // stage ('Running terraform plan') {
        //     environment {
        //         AWS_KEYS = credentials('aws-creds')
        //     }
        //     steps {
        //         script {
        //             echo "Running the terraform plan command"
        //             sh """
        //                 export AWS_DEFAULT_REGION=us-west-2
        //                 cd provision/
        //                 ./terraform plan --backend-config="access_key=$AWS_KEYS_USR" --backend-config="secret_key=$AWS_KEYS_PSW"
        //             """
        //         }
        //     }
        // }
    }

    post {
        always {
            echo 'cleaning the workspace'
            cleanWs()
        }
    }
}